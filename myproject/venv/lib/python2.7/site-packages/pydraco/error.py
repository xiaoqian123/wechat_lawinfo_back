

class Warning(StandardError):
    """
    Exception raised for important warnings like data truncations while inserting, etc. 
    It must be a subclass of the Python StandardError (defined in the module exceptions).

    This exception is part of the `DBAPI 2.0 specification
    <http://www.python.org/dev/peps/pep-0249/>`_.
    """
    pass

class Error(StandardError):
    """Generic exception that is the base exception of all other error
    exceptions.

    This exception is part of the `DBAPI 2.0 specification
    <http://www.python.org/dev/peps/pep-0249/>`_.
    """
    pass

class InterfaceError(Error):
    """
    Exception raised for errors that are related to the database interface rather than the database itself. 
    It must be a subclass of Error.
    """
    pass


class DatabaseError(Error):
    """Generic exception raised for errors that are related to the database.
       This exception is currently never raised by pg8000.

       This exception is part of the `DBAPI 2.0 specification
       <http://www.python.org/dev/peps/pep-0249/>`_.
    """
    pass



class DataError(DatabaseError):
    """
    Exception raised for errors that are due to problems with the processed data like division by zero, numeric value out of range, etc. 
    It must be a subclass of DatabaseError.

       This exception is part of the `DBAPI 2.0 specification
       <http://www.python.org/dev/peps/pep-0249/>`_.
    """
    pass

class ProgrammingError(DatabaseError):
    """Generic exception raised for programming errors.  For example, this
    exception is raised if more parameter fields are in a query string than
    there are available parameters.

    This exception is part of the `DBAPI 2.0 specification
    <http://www.python.org/dev/peps/pep-0249/>`_.
    """
    pass

class IntegrityError(DatabaseError):
    """
    Exception raised when the relational integrity of the database is affected, 
    e.g. a foreign key check fails. It must be a subclass of DatabaseError.
    """
    pass

class OperationalError(DatabaseError):
    """
    Exception raised for errors that are related to the database's operation and not necessarily under the control of the programmer, e.g. 
    an unexpected disconnect occurs, the data source name is not found, a transaction could not be processed, 
    a memory allocation error occurred during processing, etc. It must be a subclass of DatabaseError.
    """
    pass

class NotSupportedError(DatabaseError):
        """
        Exception raised in case a method or database API was used which is not supported by the database, e.g. 
        requesting a .rollback() on a connection that does not support transaction or has transactions turned off. 
        It must be a subclass of DatabaseError.
        """
        pass

class InternalError(DatabaseError):
    """
    Exception raised when the database encounters an internal error, 
    e.g. the cursor is not valid anymore, the transaction is out of sync, etc. 
    It must be a subclass of DatabaseError.
    """
    pass
